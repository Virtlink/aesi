// Standalone build

buildscript {
    file("../releng/shared.properties").withInputStream { stream ->
        def userProps = new Properties()
        userProps.load(stream)
        userProps.each { key, val ->
            if (!project.hasProperty(key)) {
                    project.ext.set(key, val);
            }
        }
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:$intellij_plugin_version"
    }
}

apply from: "../releng/shared.gradle"

dependencies {
    compile project(":paplj")
    compile project(":aesi-intellij")

    compile "com.google.inject:guice:$guice_version"
    compile "com.google.inject.extensions:guice-assistedinject:$guice_version"
    compile "com.google.inject.extensions:guice-multibindings:$guice_version"
}

apply plugin: 'org.jetbrains.intellij'

intellij {
    version idea_version
    downloadSources Boolean.valueOf(downloadIdeaSources)
    updateSinceUntilBuild = false
    instrumentCode = false
}
