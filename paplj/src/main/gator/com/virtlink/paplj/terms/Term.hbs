package com.virtlink.paplj.terms

import com.virtlink.terms.*

// GENERATED: This file is generated, do not modify.

/**
 * The {{{name}}} term.
 */
@Suppress("UNCHECKED_CAST")
class {{{name}}}({{#each properties}}
    {{#if override}}override {{/if}}val {{{name}}}: {{{type}}}{{#unless @last}},{{/unless}}{{/each}})
    : Term(){{#if extends}}{{#each extends}}, {{{this}}}{{/each}}{{/if}} {

    companion object {

        /**
         * Gets the constructor of this term.
         */
        val constructor = TermConstructorOfT("{{{name}}}", {{properties.length}}, { create(it) })

        /**
         * Creates a new term from the specified list of child terms.
         *
         * @param children The list of child terms.
         * @return The created term.
         */
        @JvmStatic fun create(children: List<ITerm>): {{{name}}} {
            if (children.size != constructor.arity) {
                throw IllegalArgumentException("children must be ${constructor.arity} in length")
            }
            {{#each properties}}
            val {{{name}}} = children[{{{@index}}}] as {{{type}}}{{/each}}
            return {{{name}}}({{#each properties}}{{{name}}}{{#unless @last}}, {{/unless}}{{/each}})
        }
    }

    override val constructor: ITermConstructor
        get() = Companion.constructor

    override val children: List<ITerm> by lazy { ChildrenList() }

    private inner class ChildrenList: AbstractList<ITerm>() {

        override val size: Int
            get() = {{{name}}}.constructor.arity

        override fun get(index: Int): ITerm
                = {{#if properties}}when (index) { {{#each properties}}
                    {{{@index}}} -> this@{{{../name}}}.{{{name}}}{{/each}}
                    else -> throw IndexOutOfBoundsException()
                }{{else}}throw IndexOutOfBoundsException(){{/if}}

    }

}
